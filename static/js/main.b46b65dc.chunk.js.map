{"version":3,"sources":["theme.tsx","components/counter/Button.tsx","components/counter/imgs/pink-axo-vertical.gif","components/counter/imgs/white-axo-side.gif","components/counter/Counter.tsx","components/hackertyper/code.tsx","components/hackertyper/Welcome.tsx","components/hackertyper/Hackertyper.tsx","components/memoryGame/Piece.tsx","components/memoryGame/MemoryGame.tsx","components/memoryGame/arrayUtils.ts","components/tictactoe/gameLogic.ts","components/tictactoe/tictactoe.tsx","components/todo/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","primary","plus","minus","fontSecondary","fontPrimary","background","hover","backgroundGranted","denied","backgroundDenied","font","accent","base","faded","pale","h1Font","white","secondary","box","textColor","flipped","notFlipped","ButtonStyled","styled","button","props","Button","className","this","onClick","text","Component","DivMain","div","DivBtns","DivTalk","DivCount","ImgWAxo","img","ImgPAxo","Counter","setState","prevState","count","state","id","src","whiteAxo","alt","pinkAxo","codeDemo","DivWelcome","H1","h1","P","p","Welcome","startGame","DivContainer","DivTerminal","DivPopDenied","DivPopGranted","keyCodes","pressXTimes","Hackertyper","pressKey","e","isWelcome","keyCode","altCnt","isGranted","isDenied","clCnt","i","position","code","substring","length","window","scrollTo","document","body","scrollHeight","cnt","key","bind","addEventListener","ButtonPiece","guessed","Img","Piece","isGuessed","isFlippedNow","image","DivWrapper","PWinMessage","cards","name","flippedNow","MemoryGame","useState","numberOfTries","setNumberOfTries","setFlipTimeout","sort","Math","random","matrix","setMatrix","guessedArr","setGuessedArr","setflippedNowArr","closeAllCards","map","piece","useEffect","filter","setTimeout","checkMatch","checkGuessed","index","card","some","flip","checkRows","boardMatrix","size","winningLength","maxDynamicSize","winningLine","j","checkDiagonals","arr","positiveSlope","negativeSlope","finalArr","k","push","h","transpose","m","_","x","Table","table","DivInput","DivWrapSettings","DivResult","DivTurn","InputBoardSize","input","Box","initializeBoardMatrix","Array","from","Tictactoe","xTurn","winner","gameOver","clickedXtimes","setSize","Number","target","value","move","rowIndex","columnIndex","row","cell","whoWon","checkWin","clickCounter","checkDraw","avoidLeadingZero","toString","type","onChange","min","max","boardRow","DivBlock","ButtonCheckAll","InputTask","Input","Form","form","DivFilter","UlFiltered","ul","LiFiltered","li","ButtonFiltered","selected","DivTask","strikethrough","DivNumOfTasks","TaskLi","ButtonDestroy","Todo","tasks","idInc","isActive","isCompleted","addToArr","addTask","isChecked","deleteFnc","checkAll","showActive","showInactive","showAll","event","preventDefault","newTask","status","task","item","every","each","filteredArr","onSubmit","required","placeholder","checked","elem","UlNav","GlobalStyle","createGlobalStyle","bgcolor","App","location","pathname","to","style","textDecoration","path","withRouter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b46b65dc.chunk.js","sourcesContent":["export const theme = {\n  counter: {\n    primary: \"#ffdab7\",\n    plus: \"#7ccbff\",\n    minus: \"#ff8b5d\",\n    fontSecondary: \"normal 1.2em/150% 'Poppins', sans-serif\",\n    fontPrimary: \"normal 1.5em/150% 'Vollkorn', serif\",\n    background: \"#79bac2\",\n  },\n  hackertyper: {\n    background: \"#000000\",\n    primary: \"#00ff00\",\n    hover: \"#009100\",\n    backgroundGranted: \"#585858\",\n    denied: \"#fd3131\",\n    backgroundDenied: \"#5a0000\",\n    font: \"mono\",\n  },\n  todo: {\n    accent: \"#ead7d7\",\n    base: \"#f5f5f5\",\n    faded: \"#e6e6e6\",\n    primary: \"#7b7777\",\n    pale: \"#f1ffff\",\n    h1Font: \"'Helvetica Neue', Helvetica, Arial, sans-serif\",\n    background: \"#f5f5f5\",\n    white: \"#FFFFFF\",\n  },\n\n  tictactoe: {\n    primary: \"#ff8133\",\n    secondary: \"#0b454d\",\n    box: \"#ce903f\",\n    background: \"#d1d1d1\",\n    textColor: \"#ffffff\",\n    fontPrimary: '\"Cabin Sketch\", cursive',\n    fontSecondary: \"monospace\",\n  },\n\n  memoryGame: {\n    primary: \"#33ff3d\",\n    flipped: \"#2b6d6d\",\n    notFlipped: \"#6d83ac\",\n    background: \"#212746\",\n    textColor: \"#bcb1ca\",\n    fontPrimary: \"'Delius Swash Caps', cursive\",\n    fontSecondary: \"monospace\",\n  },\n};\n","import { theme } from \"./../../theme\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\ntype Props = {\n  className: string;\n  text: string;\n  onClick: () => void;\n  background: string;\n};\n\n// styled-components definition\ntype ButtonProps = { background: string };\nconst ButtonStyled = styled.button<ButtonProps>`\n  width: 100px;\n  height: 100px;\n  border: 0;\n  box-shadow: 0 5px 6px -6px black;\n  background: ${(props) =>\n    props.background === \"plus\"\n      ? theme.counter.plus\n      : props.background === \"minus\"\n      ? theme.counter.minus\n      : \"\"};\n\n  :hover {\n    box-shadow: 0 5px 6px -6px ${theme.hackertyper.background},\n      inset 0 0 150px -80px ${theme.hackertyper.background};\n    cursor: pointer;\n  }\n\n  :active {\n    box-shadow: inset 0 0 200px -70px ${theme.hackertyper.background};\n  }\n`;\n\nexport default class Button extends Component<Props> {\n  render() {\n    return (\n      <ButtonStyled\n        className={this.props.className}\n        onClick={this.props.onClick}\n        background={this.props.background}\n      >\n        {this.props.text}\n      </ButtonStyled>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/pink-axo-vertical.d65f91ee.gif\";","export default __webpack_public_path__ + \"static/media/white-axo-side.0dfb56ba.gif\";","import { theme } from \"./../../theme\";\nimport { withRouter } from \"react-router\";\nimport Button from \"./Button\";\nimport React, { Component } from \"react\";\nimport pinkAxo from \"./imgs/pink-axo-vertical.gif\";\nimport styled from \"styled-components\";\nimport whiteAxo from \"./imgs/white-axo-side.gif\";\n\ntype State = {\n  count: number;\n};\n\ntype Props = {\n  className?: string;\n};\n\n// styled-components definition\nconst DivMain = styled.div`\n  * {\n    padding: 0;\n    margin: 0;\n    color: ${theme.counter.primary};\n    font: ${theme.counter.fontPrimary};\n  }\n\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DivBtns = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 30vw;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst DivTalk = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 30vw;\n  height: 7rem;\n`;\n\nconst DivCount = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 80vh;\n  overflow: hidden;\n`;\n\nconst ImgWAxo = styled.img`\n  display: block;\n  position: absolute;\n  left: 10rem;\n  transform: scaleX(-1);\n  height: 165px;\n  margin-top: -25vh;\n`;\n\nconst ImgPAxo = styled.img`\n  display: block;\n  position: absolute;\n  right: 10rem;\n  margin-top: 30vh;\n  height: 150px;\n`;\n\nexport default class Counter extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n  }\n\n  plus = () => {\n    this.setState((prevState) => ({\n      count: prevState.count + 1,\n    }));\n  };\n\n  minus = () => {\n    this.setState((prevState) => ({\n      count: prevState.count - 1,\n    }));\n  };\n\n  render() {\n    var { count } = this.state;\n    return (\n      <DivMain id=\"main-div\" className=\"counter\">\n        <ImgWAxo\n          className=\"white-axo\"\n          src={whiteAxo}\n          alt=\"white-axolotl\"\n        ></ImgWAxo>\n        <DivCount id=\"count-div\">\n          <DivTalk id=\"talk\">\n            <h2>Counter:</h2>\n          </DivTalk>\n          <DivBtns id=\"btns-div\">\n            <Button\n              className=\"plus-btn\"\n              onClick={this.plus}\n              text=\"+\"\n              background=\"plus\"\n            ></Button>\n            {count}\n            <Button\n              className=\"minus-btn\"\n              onClick={this.minus}\n              text=\"-\"\n              background=\"minus\"\n            ></Button>\n          </DivBtns>\n        </DivCount>\n        <ImgPAxo\n          className=\"pink-axo\"\n          src={pinkAxo}\n          alt=\"pink-axolotl\"\n        ></ImgPAxo>\n      </DivMain>\n    );\n  }\n}\n","export var codeDemo = `#include \"lora.h\"\n#define DEBUG\n\nConstructor: Parameters are Slave-select pin, interrupt pin, reset pin\nlora::lora(uint8_t slaveSelectPin, uint8_t interruptPin, uint8_t resetPin)\n\t:\n\tRH_RF95(slaveSelectPin, interruptPin)\n{\n\t_resetPin = resetPin;\n}\n//************************************************\n//Function: Reset and initialization\n void lora::On(){\n  \n  pinMode(_resetPin, OUTPUT);\n  digitalWrite(_resetPin, HIGH);\n\n  // manual reset\n  digitalWrite(_resetPin, LOW);\n  delay(10);\n  digitalWrite(_resetPin, HIGH);\n  delay(10);\n\n  while (!init()) {\n    Serial.println(\"LoRa radio init failed\");\n    while (1);\n  }\n  Serial.println(\"LoRa radio init OK!\");\n  //if you set manual to true, you are resposible for setting the frequency, coding rate, bandwidth, spreading factor and respecting the duty cycle!\n  \t_manual = false;\n  // The default transmitter power is 13dBm, using PA_BOOST.\n  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then \n  // you can set transmitter powers from 5 to 23 dBm:\n  setTxPower(INIT_TX_POWER, false);\t\n}\n//************************************************\n//Function: Setting the default communication parameters\nvoid lora::SetDefault(){\n\tSetFrequency(REG_CHANNEL_1);\n    SetBW(DEFAULT_BW);\n    SetSF(DEFAULT_SF);\n    SetCR(DEFAULT_CR);\n}\n\nvoid lora::Sleep(){\n\tspiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);\n}\n\nvoid lora::Awake(){\n\t\tspiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);\n}\n\n\n//************************************************\n//Function: Set the bandwidth\nbool lora::SetBW(float bandwidth) {\n#ifdef DEBUG\n  Serial.print(\"Setting BW: \");\n  Serial.println(bandwidth);\n #endif\n  bool state = false;\n  byte value = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1);\n  byte bw;\n  \n\tif\t    (bandwidth ==  7.80)\t\tbw = BW_7_8;\n\telse if(bandwidth ==  10.40) \tbw = BW_10_4;\n\telse if(bandwidth ==  15.60)\t\tbw = BW_15_6; \n\telse if(bandwidth ==  20.80)\t\tbw = BW_20_8; \n\telse if(bandwidth ==  31.25)\t\tbw = BW_31_25;\n\telse if(bandwidth ==  41.70)\t\tbw = BW_41_7;\n\telse if(bandwidth ==  62.50)\t\tbw = BW_62_5;\n\telse if(bandwidth ==  125.00)\tbw = BW_125;\n\telse if(bandwidth ==  500.00)\tbw = BW_500;\n\telse return false;\n\n  value &= B00001111;\n  value |= bw;\n  spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1, value);\n  value = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1);\n  //getting the bandwidth bits only\n  value &= B11110000;\n  if (value == bw) {\n    state = true;\n  }\n  return state;\n}\n//************************************************\n//Function: Set the coding rate\nbool lora::SetCR(uint8_t codingrate) {\n#ifdef DEBUG\n  Serial.print(\"Setting CR: \");\n  Serial.println(codingrate);\n#endif\n  bool state = false;\n  byte value = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1);\n  byte cr;\n\n\tswitch(codingrate){\n\t\tcase 5: cr = CR_5; break;\n\t\tcase 6: cr = CR_6; break;\n\t\tcase 7: cr = CR_7; break;\n\t\tcase 8: cr = CR_8; break;\n\t\tdefault: return false;\n\t}\n  \n  //clear bits for coding rate\n  value &= B11110001;\n  //set coding rate bits\n  value |= cr;\n  spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1, value);\n  value = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1);\n  //getting only coding rate bits\n  value &= B00001110;\n  if (value == cr) {\n    state = true;\n  }\n  return state;\n}\n\n//Function: Setting the \nbool lora::SetPW(uint8_t power, bool useRF0){\n#ifdef DEBUG\n\tSerial.print(\"Setting PW: \");\n\tSerial.println(power);\n#endif\n\tsetTxPower(power, useRF0);\n}\n\n//Function: Set the spreading factor\nbool lora::SetSF(uint8_t spreadingfactor) {\n#ifdef DEBUG\n  Serial.print(\"Setting SF: \");\n  Serial.println(spreadingfactor);\n#endif\n  bool state = false;\n  byte value = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2);\n  byte value_mobile = spiRead(RH_RF95_REG_26_MODEM_CONFIG3);\n  byte sf;\n  bool mobile;\n\n\tswitch(spreadingfactor){\n\t\tcase 6: \tsf = SF_6; \tmobile = false; break;\n\t\tcase 7:\tsf = SF_7; \tmobile = false; break;\n\t\tcase 8: \tsf = SF_8; \tmobile = false; break;\n\t\tcase 9: \tsf = SF_9; \tmobile = false; break;\n\t\tcase 10:\tsf = SF_10; mobile = false; break;\n\t\tcase 11:\tsf = SF_11; mobile = true; break;\n\t\tcase 12:\tsf = SF_12; mobile = true; break;\n\t\tdefault: return false;\n\t}\n\t\n\tif (mobile == true) {\n\t\tvalue_mobile &= B11110011;\n\t\tvalue_mobile |= B00001100;\n\t\tspiWrite(RH_RF95_REG_26_MODEM_CONFIG3, value_mobile);\n\t}\t \n\telse {\n\t\tvalue_mobile &= B11110011;\n\t\tvalue_mobile |= B00000100;\n\t\tspiWrite(RH_RF95_REG_26_MODEM_CONFIG3, value_mobile);\n\t}\n\t\n  value &= B00001111;\n  value |= sf;\n  spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2, value);\n  value = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2);\n  value &= B11110000;\n  if (value = sf) {\n    state = true;\n  }\n  return state;\n}\n\n//Function: Set the frequency\nbool lora::SetFrequency(float frequency){\n#ifdef DEBUG\t\n\tSerial.print(\"Setting FREQ: \");\n\tSerial.println(frequency);\n#endif\t\n\treturn setFrequency(frequency);\n}\n\n//Function: Sendi the common message\nvoid lora::SendMessage(uint8_t type, uint8_t ack, uint8_t* data, uint8_t &len){\n\tuint8_t payload[RH_RF95_MAX_PAYLOAD_LEN];\n\tsetDEVID(payload);\n\tsetType(payload, type);\n\tsetACK(payload, ack);\n\t\n\tuint8_t* datapointer = &payload[4];\n\t*datapointer = len;\n\tdatapointer++;\n\tmemcpy(datapointer, data, len);\n\t\n\tdatapointer += len;//jump to seq\n\tuint16_t* seqpointer = (uint16_t*) datapointer;\n\t_sequence_number++;\n\t*seqpointer = _sequence_number;\n\t\n\tdatapointer += sizeof(uint16_t);\n\tuint32_t* micpointer = (uint32_t*) datapointer;\n\t*micpointer = Encryption::createCheck(&payload[4], len + 3);//applen + payloadlen + seq\n\t\n\tuint8_t actuallen = len + 7; //applen + payloadlen + seq + mic\n\tint8_t paddinglen;\n\tif(actuallen < 8){\n\t\tpaddinglen = 8 - actuallen;\n\t}else{\n\t\tpaddinglen = actuallen % 4;\n\t\tif(paddinglen != 0){\n\t\t\tpaddinglen = 4 - paddinglen;\n\t\t}\n\t}\n\n\tdatapointer += sizeof(uint32_t); \n\tfor(int i = 0; i< paddinglen; i++){\n\t\t*datapointer = random();\n\t\tdatapointer++;\n\t}\n\t\n\tEncryption::encrypt(&payload[4], actuallen + paddinglen, dhkey1.session_private_key);\n\tSerial.println(\"Waiting for packet to complete...\"); delay(10);\n\tsend(payload,4 + actuallen + paddinglen);\n\twaitPacketSent();\n}\n\nuint8_t lora::GetMessageLength(uint8_t len){\t\n\tuint8_t actuallen = len + 7;\n\tint8_t paddinglen;\n\tif(actuallen < 8){\n\t\tpaddinglen = 8 - actuallen;\n\t}else{\n\t\tpaddinglen = actuallen % 4;\n\t\tif(paddinglen != 0){\n\t\t\tpaddinglen = 4 - paddinglen;\n\t\t}\n\t}\n\treturn 3 + 1 + actuallen + paddinglen;\n\t\n}\n\n//Function: Returns the time, after which will be device able to send data (duty cycle)\nunsigned long lora::GetDutyWait(){\n\tif(\t_sendtime > millis() ){\n\t\treturn 10 + _sendtime - millis();\n\t}else{\n\t\treturn 0;\n\t}\n}\n\n//Function: Automatic send\nbool lora::Send(uint8_t* data, uint8_t &len){\n\tif(_sendtime < millis()){\n\t\tSerial.println();\n\t\tSerial.println(\"Sending message...\");\n\t\tuint32_t time = LoadNetworkData(TYPE_DATA_UP, GetMessageLength(len));\n\t\t_sendtime = millis() +  time;\n\t\tSendMessage(TYPE_DATA_UP, ACK_OPT, data, len);\n\t\tReceive(data,len);\n\t\treturn true;\n\t}\n\telse{\n\t\tSerial.print(\"Duty cycle: \");\n\t\tSerial.println(GetDutyWait());\n\t\treturn false;\n\t}\n}\n\n//Function: Specific send\nbool lora::Send(uint8_t type, uint8_t ack, uint8_t* data, uint8_t &len){\n\t\tif(_sendtime < millis()){\n\t\tuint32_t time = LoadNetworkData(type, GetMessageLength(len));\n\t\t_sendtime = millis() + time;\n\t\tSendMessage(type,ack,data,len);\t\t\n\t\tif(ack == ACK_MAN){\n\t\t\tuint8_t temp = len;\n\t\t\tif(Receive(data,len) == false){\n\t\t\t\tlen = temp;\t\t\t\t\n\t\t\t\treturn SendEmergency(data,len);\n\t\t\t}\n\t\t}\n\t\telse if(ack == ACK_OPT){\n\t\t\tReceive(data,len) ;\n\t\t}\n\t\telse{\n\t\t\tlen = 0;\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t}\n\telse{\n\t\tSerial.print(\"Duty cycle: \");\n\t\tSerial.print(GetDutyWait());\n\t\tSerial.println(\" -with Mandatory ACK\");\n\t\treturn false;\n\t}\n}\n\n//Function: Hello function\nbool lora::SendHello(uint8_t* data, uint8_t &len){\n\tif(_sendtime < millis()){\n\t\tuint32_t time = LoadNetworkData(TYPE_HELLO_UP,len);\n\t\tSendMessage(TYPE_HELLO_UP, ACK_OPT, data, len);\n\t\t_sendtime = millis() + time;\n\t\tReceive(data,len);\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\nbool lora::SendEmergency(uint8_t* data, uint8_t &len){\n\tuint8_t iteration = 0;\n\tuint8_t temp = len;\n\tSerial.print(\"Delay for duty cycle before emergency: \");\n\tSerial.println( GetDutyWait()  );\n\tdelay( GetDutyWait() );\n\tdo{\n\t\t\tif(_sendtime < millis()){\n\t\t\tuint32_t time = LoadNetworkData(TYPE_EMER_UP,GetMessageLength(temp) );\n\t\t\tSendMessage(TYPE_EMER_UP, ACK_MAN, data, temp);\n\t\t\t_sendtime = millis() + time;\n\t\t\tSerial.println(\"Sending emergency and receiving...\");\n\t\t\tif(Receive(data,len)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\titeration++;\n\t\t}else{\n\t\t\tSerial.print(\"Duty  cycle: \");\n\t\t\tSerial.print(GetDutyWait());\n\t\t\tSerial.println(\"  -Emergency\");\n\t\t\tdelay( GetDutyWait() );\n\t\t}\n\t}while(iteration < 3);\n\t\n\t//Emergency messages weren't acknoledged. Starting the registration process again.\n\tLoadNetworkData(TYPE_REG_UP,20);\n\tlen = 20;\n\tRegister(data, len);\n\treturn false;\n}\n\n//Function: Register the device\nbool lora::Register(uint8_t* buffer, uint8_t &len){\n\tSetDefault();\n\tuint8_t payload[20];\n\tsetDEVID(payload);\n\tsetType(payload, TYPE_REG_UP);\n\tsetType(payload, ACK_MAN);\n\tdhkey1.sendDHA(&payload[4]);\n\t#ifdef DEBUG\n\tSerial.println(\"Sending register...\"); delay(10);\n\t#endif\n\tsend(payload, sizeof(payload));\n\twaitPacketSent();\n\t_sendtime = 0;\n\t_sequence_number = 0;\n\tint regiterator = 0;\n\tbool recValue = Receive(buffer, len);\n\t\n\twhile(!recValue)\n\t{\n\t\tif(regiterator < 3){\n\t\t\tsend(payload, sizeof(payload));\n\t\t\twaitPacketSent();\n\t\t\tSerial.println(\"ITERATOR < 3\");\n\t\t\trecValue = Receive(buffer, len);\n\t\t}\n\t\telse{\n\t\t\t//pseudo-random sequence\n\t\t\tswitch(regiterator){\n\t\t\t\tcase 3: setFrequency(REG_CHANNEL_2); break;\n\t\t\t\tcase 4: setFrequency(REG_CHANNEL_3); break;\n\t\t\t\tcase 5: setFrequency(REG_CHANNEL_4); break;\n\t\t\t\tcase 6: setFrequency(REG_CHANNEL_5); break;\n\t\t\t}\n\t\t\tsend(payload, sizeof(payload));\n\t\t\twaitPacketSent();\n\t\t\trecValue = Receive(buffer, len);\n\t\t}\n\t\tregiterator++;\n\t\tdelay(1000);\n\t\tif(regiterator == 7){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//Function: Receiving the packet\nbool lora::Receive(uint8_t* buf, uint8_t &len){\n  spiWrite(RH_RF95_REG_33_INVERT_IQ, spiRead(RH_RF95_REG_33_INVERT_IQ)|(1<<6));\n  Serial.println(\"Waiting for reply...\"); delay(10);\n  if (waitAvailableTimeout(RECEIVE_TIMEOUT))\n  { \n\tif (!available()){\n\t\tlen = 0;\n\t\treturn false;\n\t}\n\tATOMIC_BLOCK_START;\n\tif(_bufLen < 4){\n\t\tlen = 0;\n\t\treturn false;\n\t}\n\t\n\tif(_buf[0] == DEVICE_ID1\n\t&& _buf[1] == DEVICE_ID2\n\t&& _buf[2] == DEVICE_ID3){\n\n\t\tuint8_t type = _buf[3] & MASK_TYPE;\n\t\tswitch(type){\n\t\t\tcase TYPE_REG_DOWN:\n\t\t\t\tif(ProcessMessage(buf, len, true)){\n\t\t\t\t\tSerial.println(\"Processing the register down message...\");\n\t\t\t\t\tProcessNetworkData(&_buf[21], _buf[20], true);\n\t\t\t\t\tclearRxBuf();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TYPE_DATA_DOWN:\n\t\t\t\tif(ProcessMessage(buf, len, false)){\n\t\t\t\t\tProcessNetworkData(&_buf[5], _buf[4], false);\n\t\t\t\t\tclearRxBuf();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault: break;\n\t\t}\n\t}\n\tATOMIC_BLOCK_END;\n    clearRxBuf(); // This message accepted and cleared\n    return false;\n  }\n  else\n  {\n\tlen = 0;\n    Serial.println(\"No reply, is there a listener around?\");\n\treturn false;\n  }\n}\n\n//Function: Processing the received message\nbool lora::ProcessMessage(uint8_t* dataout, uint8_t &len, bool reg){\n\tuint8_t* payload = &_buf[4];\n\t\n\tif(reg){\n\t\tdhkey1.getSessionKey(&_buf[4]);\n\t\tpayload = &_buf[20];\n\t\tEncryption::decrypt(payload, _bufLen - 20, dhkey1.session_private_key);\n\t}\n\telse{\n\t\tEncryption::decrypt(payload, _bufLen - 4, dhkey1.session_private_key);\n\t}\n\t\n\t//data are decrypted now, even it's called encrypted\n\tuint8_t* decryptedpointer = payload;\n\t//get network length\n\tuint8_t networklen = payload[0];\n\tpayload += networklen + 1; //jump to aplication length\n\t\n\tuint8_t applen = payload[0];\n\tif(applen > len)\n\t\treturn false;\n\tmemcpy(dataout, payload+1, applen);\n\tlen = applen;\n\t\n\tpayload += applen + 1;//jump to sequence number\n\tuint16_t* sequencepointer = (uint16_t*) payload;\n\tif(!reg){\n\t\tif(!CheckSequence(*sequencepointer)){\n\t\t\tSerial.println(\"**ERROR: Bad seq\");\n\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\t_sequence_number = *sequencepointer;\n\t\t}\n\t}else{\n\t\t_sequence_number = *sequencepointer;\n\t}\n\tpayload += sizeof(uint16_t);\n\t\n\tuint32_t* micpointer = (uint32_t*) payload;\n\tif(Encryption::isLoraPacketCorrect(decryptedpointer, networklen + applen + 4, *micpointer) == false) // 4 bytes for netlen appLen and seq\n\t{\n\t\tSerial.println(\"**ERROR: Bad MIC\");\n\t\treturn false;\n\t}\n\t\n\tSerial.println(\"Received message is ok!\");\n\treturn true;\n}\n\n\n\nvoid lora::ProcessNetworkData(uint8_t* data, uint8_t len, bool reg){\n\tnetconfig global;\n\tEEPROM.get(0,global);\n\n\tif(reg){\t\t\n\t\t//downlink reg must be full\n\n\t\tif(data[0] != 0)\n\t\t\treturn;\n\n\t\tuint8_t i = 1;\n\t\tif(len == 0)\n\t\t\treturn;\n\t\twhile(i < len){\n\t\t\tuint8_t j;\n\t\t\t\n\t\t\tswitch((data[i] & MASK_MSB)){\n\t\t\t\tcase REC_D_FRQ:\n\t\t\t\t\tglobal.freqDataSize = data[i] & MASK_LSB;\n\t\t\t\t\tfor(j = 0; j<(data[i] & MASK_LSB); j++){\n\t\t\t\t\t\tglobal.freqData[j] = data[i + 1 + j];\n\t\t\t\t\t}\n\t\t\t\t\ti += j + 1; // jump to BW from freq type and num\n\t\t\t\t\tglobal.bwData = data[i] & MASK_MSB;\n\t\t\t\t\tglobal.bwData = global.bwData >> 4;\n\t\t\t\t\tglobal.crData = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tglobal.pwData = data[i] & MASK_MSB;\n\t\t\t\t\tglobal.pwData = global.pwData >> 4;\n\t\t\t\t\tglobal.sfData = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase REC_R_FRQ:\n\t\t\t\t\tglobal.freqRegSize = data[i] & MASK_LSB;\n\t\t\t\t\tfor(j = 0; j< (data[i] & MASK_LSB); j++){\n\t\t\t\t\t\tglobal.freqReg[j] = data[i + 1 + j];\n\t\t\t\t\t}\n\t\t\t\t\ti += j + 1; // jump to BW from freq type and num\n\t\t\t\t\tglobal.bwReg = data[i] & MASK_MSB;\n\t\t\t\t\tglobal.bwReg = global.bwReg >> 4;\n\t\t\t\t\tglobal.crReg = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tglobal.pwReg = data[i] & MASK_MSB;\n\t\t\t\t\tglobal.pwReg = global.pwReg >> 4;\n\t\t\t\t\tglobal.sfReg = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase REC_E_FRQ:\n\t\t\t\t\tglobal.freqEmerSize = data[i] & MASK_LSB;\n\t\t\t\t\tfor(j = 0; j<(data[i] & MASK_LSB); j++){\n\t\t\t\t\t\tglobal.freqEmer[j] = data[i + 1 + j];\n\t\t\t\t\t}\n\t\t\t\t\ti += j + 1; // jump to BW from freq type and num\n\t\t\t\t\tglobal.bwEmer = data[i] & MASK_MSB;\n\t\t\t\t\tglobal.bwEmer = global.bwEmer >> 4;\n\t\t\t\t\tglobal.crEmer = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tglobal.pwEmer = data[i] & MASK_MSB;\n\t\t\t\t\tglobal.pwEmer = global.pwEmer >> 4;\n\t\t\t\t\tglobal.sfEmer = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t}\n\t\telse{\n\t\tuint8_t i=0;\n\t\tif(data[i] == 0){\n\t\t\tProcessNetworkData(data,len,true);\n\t\t\treturn;\n\t\t}\n\t\tif(len == 0)\n\t\t\treturn;\n\t\twhile(i < len){\n\t\t\tuint8_t j;\n\t\t\tswitch((data[i] & MASK_MSB)){\n\t\t\t\tcase REC_D_FRQ:\n\t\t\t\t\tglobal.freqDataSize = data[i] & MASK_LSB;\n\t\t\t\t\tfor(j = 0; j< (data[i] & MASK_LSB); j++){\n\t\t\t\t\t\tglobal.freqData[j] = data[i + 1 + j];\n\t\t\t\t\t}\n\t\t\t\t\ti += j + 1; // jump to next\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase REC_R_FRQ:\n\t\t\t\t\tglobal.freqRegSize = data[i] & MASK_LSB;\n\t\t\t\t\tfor(j = 0; j< (data[i] & MASK_LSB); j++){\n\t\t\t\t\t\tglobal.freqReg[j] = data[i + 1 + j];\n\t\t\t\t\t}\n\t\t\t\t\ti += j + 1; // jump to next\t\t\n\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t\tcase REC_E_FRQ:\n\t\t\t\t\tglobal.freqEmerSize = data[i] & MASK_LSB;\n\t\t\t\t\tfor(j = 0; j< (data[i] & MASK_LSB); j++){\n\t\t\t\t\t\tglobal.freqEmer[j] = data[i + 1 + j];\n\t\t\t\t\t}\n\t\t\t\t\ti += j + 1; // jump to next\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\t//***********\n\t\t\t\tcase REC_D_BW:\n\t\t\t\t\tglobal.bwData = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase REC_R_BW:\n\t\t\t\t\tglobal.bwReg = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase REC_E_BW:\n\t\t\t\t\tglobal.bwEmer = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t//***********\n\t\t\t\tcase REC_D_CR:\n\t\t\t\t\tglobal.crData = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\n\t\t\t\t\n\t\t\t\tcase REC_R_CR:\n\t\t\t\t\tglobal.crReg = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\n\t\t\t\tcase REC_E_CR:\n\t\t\t\t\tglobal.crEmer = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\n\t\t\t\t//***********\n\t\t\t\tcase REC_D_PW:\n\t\t\t\t\tglobal.pwData = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\n\t\t\t\tcase REC_R_PW:\n\t\t\t\t\tglobal.pwReg = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\n\t\t\t\tcase REC_E_PW:\n\t\t\t\t\tglobal.pwEmer = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\n\t\t\t\t//***********\n\t\t\t\tcase REC_D_SF:\n\t\t\t\t\tglobal.sfData = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\n\t\t\t\tcase REC_R_SF:\n\t\t\t\t\tglobal.sfReg = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\n\t\t\t\tcase REC_E_SF:\t\t\t\t\n\t\t\t\t\tglobal.sfEmer = data[i] & MASK_LSB;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\tEEPROM.put(0,global);\n}\n\nuint32_t lora::LoadNetworkData(uint8_t type, uint8_t len){\n\tif(_manual == false){\n\t\tnetconfig global;\n\t\tuint8_t percentage;\n\t\tEEPROM.get(0,global);\n\t\t\n\t\tuint8_t bw;\n\t\tuint8_t freq;\n\t\tuint8_t cr;\n\t\tuint8_t sf;\n\t\tuint8_t pw; \n\t\t\n\t\tfloat bwDC;\n\t\tfloat freqDC;\n\t\tuint8_t crDC;\n\t\tuint8_t sfDC;\n\t\t\t\n\t\tif(type == TYPE_DATA_UP || type == TYPE_HELLO_UP){\n\t\t\tbw = global.bwData;\n\t\t\tfreq = global.freqData[random(0,global.freqDataSize)];\n\t\t\tcr = global.crData;\n\t\t\tsf = global.sfData;\n\t\t\tpw = global.pwData;\n\t\t}else if(type == TYPE_REG_UP){\n\t\t\tbw = global.bwReg;\n\t\t\tfreq = global.freqReg[random(0,global.freqRegSize)];\n\t\t\tcr = global.crReg;\n\t\t\tsf = global.sfReg;\n\t\t\tpw = global.pwReg;\n\t\t}else if(type == TYPE_EMER_UP){\n\t\t\tbw = global.bwEmer;\n\t\t\tfreq = global.freqEmer[random(0,global.freqEmerSize)];\n\t\t\tcr = global.crEmer;\n\t\t\tsf = global.sfEmer;\n\t\t\tpw = global.pwEmer;\n\t\t}\n\t\tswitch(bw){\n\t\t\tcase 0: SetBW(500.0); bwDC = 500.0; break;\n\t\t\tcase 1: SetBW(250.0); bwDC = 250.0; break;\n\t\t\tcase 2: SetBW(125.0); bwDC = 125.0; break;\n\t\t\tcase 3: SetBW(62.5); bwDC = 62.5; break;\n\t\t\tcase 4: SetBW(41.7); bwDC = 41.7; break;\n\t\t\tcase 5: SetBW(31.25); bwDC = 31.25;  break;\n\t\t\tcase 6: SetBW(20.8); bwDC = 20.8; break;\n\t\t\tcase 7: SetBW(15.6); bwDC = 15.6; break;\n\t\t\tcase 8: SetBW(10.4); bwDC = 10.4; break;\n\t\t\tcase 9: SetBW(7.8); bwDC = 7.8; break;\n\t\t\tdefault: SetBW(125.0); bwDC = 125.0; break;\n\t\t}\n\t\t\n\t\tfloat freqdiff = freq / 10.0;\n\t\tfreqdiff += 863;\n\t\tSetFrequency(freqdiff);\n\t\tif( (865.0 <= freqdiff && freqdiff <= 868.6) || (869.7 <= freqdiff && freqdiff <= 870.0) ){\n\t\t\tpercentage = 1;\n\t\t}\n\t\telse if(868.7 <= freqdiff && freqdiff <= 869.2){\n\t\t\tpercentage = 0;\n\t\t}\n\t\telse if(869.4 <= freqdiff && freqdiff <= 869.65){\n\t\t\tpercentage = 10;\n\t\t}\n\t\t\n\t\tswitch(cr){\n\t\t\tcase 0: SetCR(5); crDC = 5; break;\n\t\t\tcase 1: SetCR(6); crDC = 6; break;\n\t\t\tcase 2: SetCR(7); crDC = 7;\tbreak;\n\t\t\tcase 3: SetCR(8); crDC = 8; break;\n\t\t\tdefault: SetCR(5); crDC = 5; break;\n\t\t}\n\t\t\n\t\tswitch(sf){\n\t\t\tcase 0: SetSF(7); sfDC = 7; break;\n\t\t\tcase 1: SetSF(8); sfDC = 8; break;\n\t\t\tcase 2: SetSF(9); sfDC = 9; break;\n\t\t\tcase 3: SetSF(10); sfDC = 10; break;\n\t\t\tcase 4: SetSF(11); sfDC = 11; break;\n\t\t\tcase 5: SetSF(12); sfDC = 12; break;\n\t\t\tdefault: SetSF(7); sfDC = 7; break;\n\t\t}\n\n\t\t// 5 is minimum\n\t\tif(pw < 5){\n\t\t\tpw = 5;\n\t\t}\n\t\tif(pw > MAX_TX_POWER){\n\t\t\tpw = MAX_TX_POWER;\n\t\t}\n\t\tSetPW(pw,false);\n\t\t\n\t\tif(type != TYPE_REG_UP)\n\t\t\treturn WaitDutyCycle(len, bwDC, sfDC, crDC, percentage);\n\t\telse\n\t\t\treturn 0;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nuint32_t lora::WaitDutyCycle(uint8_t len, float bw, uint8_t sf, uint8_t cr, uint8_t percentage) {\n\tfloat tsymbol = pow(2,sf) / (bw * 1000);\n\ttsymbol *= 1000;\n\tuint8_t optimalization;\n\t\n\tif(sf > 10)\n\t{\n\t\toptimalization = 1;\n\t}\n\telse{\n\t\toptimalization = 0;\n\t}\n\t\n\tfloat tpreamble = (8 + 4.25) * tsymbol;\n\tfloat payloadSymbNb = 8*len - 4*sf + 28 +16;\n\tpayloadSymbNb /= (4* (sf - 2*optimalization));\n\t\n\tfloat temp = round(payloadSymbNb);\n\tif(temp < payloadSymbNb)\n\t{\n\t\tpayloadSymbNb = temp + 1;\n\t}\n\telse\n\t{\n\t\tpayloadSymbNb = temp;\n\t}\n\t\n\tfloat payload = 8 + max(payloadSymbNb*cr, 0);\n\tpayload *= tsymbol;\n\tif(percentage == 0){\n\t\treturn (payload + tpreamble) / 0.001;\n\t}\n\telse if(percentage == 1){\n\t\treturn (payload + tpreamble) / 0.01;\n\t}else if(percentage == 10){\n\t\treturn (payload + tpreamble) / 0.1;\n\t}\n}\n\n//Function: Set the manual settings mode\nvoid lora::SetManual(bool value){\n\tif(value == true){\n\t\tSerial.println(\"**MANUALMODE: You are responsible for respecting the duty cycle**\");\n\t\t_sendtime = millis();\n\t}\n\t_manual = value;\n}\n\nbool lora::CheckSequence(uint16_t seq){\n\tif(_sequence_number > 65535 - SEQ_DIFF){\n\t\tif(seq > _sequence_number || seq <= _sequence_number + SEQ_DIFF){\n\t\t\treturn true;\n\t\t}else {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse{\n\t\tif(_sequence_number > seq)\n\t\t\treturn false;\n\t\telse if(seq - _sequence_number <= SEQ_DIFF)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t\t}\n}\n\t\n//Function: Set the device ID to the message\nvoid lora::setDEVID(uint8_t* message){\n\tmessage[0] = DEVICE_ID1;\n\tmessage[1] = DEVICE_ID2;\n\tmessage[2] = DEVICE_ID3;\n}\n\n//Function: Set the type of the message\nvoid lora::setType(uint8_t* message, uint8_t type){\n\tmessage[3] = type;\n}\n\n//Function: Set the ACK of the message\nvoid lora::setACK(uint8_t* message, uint8_t ack){\n\tmessage[3] |= ack;\n}`;\n","import { theme } from \"../../theme\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\n//styled-components\nconst DivWelcome = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: left;\n`;\n\nconst H1 = styled.h1`\n  width: 100%;\n`;\n\nconst P = styled.p`\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  margin-top: 5rem;\n  height: 4em;\n  width: 14em;\n  font-size: large;\n  background-color: ${theme.hackertyper.background};\n  color: ${theme.hackertyper.primary};\n  border: 1px solid ${theme.hackertyper.hover};\n\n  :hover {\n    background-color: ${theme.hackertyper.hover};\n    cursor: pointer;\n  }\n`;\n\ntype Props = {\n  startGame: () => void;\n};\n\nexport default class Welcome extends Component<Props> {\n  render() {\n    return (\n      <DivWelcome id=\"welcome-container\">\n        <H1>How To Use Hacker Typer</H1>\n        <P id=\"quick-start\">{`Quick Start Instructions:\nStart typing on the keyboard to 'code'. For mobile, just tap on your screen.`}</P>\n        <P>{`How to get access granted in hacker typer?\nHit ALT 3 times for \"Access Granted\"\n\nHow to get access denied in hacker typer?\nHit CAPS LOCK 3 for \"Access Denied\"\nHow can I clear access granted or access denied?\nHit ESCAPE to clear \"Access Denied/Granted\"`}</P>\n        <Button id=\"start-btn\" onClick={this.props.startGame}>\n          Start HackerTyping...\n        </Button>\n      </DivWelcome>\n    );\n  }\n}\n","import { codeDemo } from \"./code\";\nimport { theme } from \"../../theme\";\nimport React, { Component } from \"react\";\nimport Welcome from \"./Welcome\";\nimport styled from \"styled-components\";\n\n//styled-components definition\nconst DivContainer = styled.div`\n  background-color: ${theme.hackertyper.background};\n  color: ${theme.hackertyper.primary};\n  font-family: ${theme.hackertyper.font};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  ::-webkit-scrollbar {\n    width: 0;\n  }\n`;\n\nconst DivTerminal = styled.div`\n  padding-left: 5em;\n  width: 100%;\n  white-space: pre;\n  line-height: 2rem;\n\n  ::-webkit-scrollbar {\n    width: 0;\n  }\n`;\n\nconst DivPopDenied = styled.div`\n  display: flex;\n  position: fixed;\n  height: 15vh;\n  width: 30vw;\n  top: 40%;\n  left: 35%;\n  justify-content: center;\n  align-items: center;\n  font-size: 3vw;\n  font-weight: bolder;\n  border: 0.5vh solid ${theme.hackertyper.denied};\n  background-color: ${theme.hackertyper.backgroundDenied};\n  color: ${theme.hackertyper.denied};\n`;\n\nconst DivPopGranted = styled.div`\n  display: flex;\n  position: fixed;\n  height: 15vh;\n  width: 30vw;\n  top: 40%;\n  left: 35%;\n  justify-content: center;\n  align-items: center;\n  font-size: 3vw;\n  font-weight: bolder;\n  border: 0.5vh solid ${theme.hackertyper.primary};\n  background-color: ${theme.hackertyper.backgroundGranted};\n  color: ${theme.hackertyper.primary};\n`;\n\ntype State = {\n  code: string;\n  position: number;\n  isWelcome: boolean;\n  cnt: number;\n  key: string;\n  isDenied: boolean;\n  isGranted: boolean;\n  altCnt: number;\n  clCnt: number;\n};\n\ntype Props = {\n  className?: string;\n};\n\nconst keyCodes = {\n  ALT: 18,\n  CAPS: 20,\n  ESC: 27,\n  BACKSPACE: 8,\n};\n\nconst pressXTimes = {\n  pressCAPS: 2,\n  pressALT: 3,\n};\n\nconst stepSize = 3;\n\nexport default class Hackertyper extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: \"\",\n      position: 0,\n      isWelcome: true,\n      cnt: 0,\n      key: \"\",\n      isDenied: false,\n      isGranted: false,\n      altCnt: 0,\n      clCnt: 0,\n    };\n    this.startGame = this.startGame.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.pressKey);\n  }\n\n  pressKey = (e) => {\n    if (this.state.isWelcome === true) {\n      this.setState({\n        isWelcome: false,\n      });\n    }\n\n    if (e.keyCode === keyCodes.ALT) {\n      this.setState((prevState) => ({\n        altCnt: prevState.altCnt + 1,\n      }));\n      if (this.state.altCnt === pressXTimes.pressCAPS) {\n        this.setState({\n          isGranted: true,\n          isDenied: false,\n          altCnt: 0,\n          clCnt: 0,\n        });\n      }\n    } else if (e.keyCode === keyCodes.CAPS) {\n      this.setState((prevState) => ({\n        clCnt: prevState.clCnt + 1,\n      }));\n      if (this.state.clCnt === pressXTimes.pressALT) {\n        this.setState({\n          isDenied: true,\n          isGranted: false,\n          clCnt: 0,\n          altCnt: 0,\n        });\n      }\n    } else if (e.keyCode === keyCodes.ESC) {\n      this.setState({\n        isDenied: false,\n        isGranted: false,\n        altCnt: 0,\n        clCnt: 0,\n      });\n    } else {\n      this.setState({\n        altCnt: 0,\n        clCnt: 0,\n      });\n    }\n\n    if (e.keyCode === keyCodes.BACKSPACE) {\n      let i =\n        this.state.position - stepSize < 0 ? 0 : this.state.position - stepSize;\n      this.setState((prevState) => ({\n        code: codeDemo.substring(0, i),\n        position:\n          prevState.position - stepSize < 0 ? 0 : prevState.position - stepSize,\n      }));\n    } else if (\n      e.keyCode !== keyCodes.ALT &&\n      e.keyCode !== keyCodes.CAPS &&\n      e.keyCode !== keyCodes.ESC\n    ) {\n      this.setState((prevState) => ({\n        code: codeDemo.substring(0, prevState.position + stepSize),\n        position:\n          codeDemo.length >= prevState.position + stepSize\n            ? prevState.position + stepSize\n            : 0,\n      }));\n      window.scrollTo(0, document.body.scrollHeight);\n    }\n  };\n\n  startGame = () => {\n    this.setState({\n      isWelcome: false,\n    });\n  };\n\n  render() {\n    let isWelcome = this.state.isWelcome;\n    return (\n      <DivContainer id=\"container\" className=\"hackertyper\">\n        {isWelcome ? (\n          <Welcome startGame={this.startGame}></Welcome>\n        ) : (\n          <DivTerminal id=\"terminal\">{this.state.code}</DivTerminal>\n        )}\n        {this.state.isDenied && (\n          <DivPopDenied className=\"popup\" id=\"access-denied\">\n            ACCESS DENIED\n          </DivPopDenied>\n        )}\n        {this.state.isGranted && (\n          <DivPopGranted className=\"popup\" id=\"access-granted\">\n            ACCESS GRANTED\n          </DivPopGranted>\n        )}\n      </DivContainer>\n    );\n  }\n}\n","import { Component, useState } from \"react\";\nimport { theme } from \"../../theme\";\nimport styled from \"styled-components\";\n\nconst ButtonPiece = styled.div<{\n  flipped: boolean;\n  image: string;\n  guessed: boolean;\n}>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 20vh;\n  width: 20vw;\n  font: 2vw/0 ${theme.memoryGame.fontPrimary};\n  color: ${theme.memoryGame.textColor};\n  border: ${theme.memoryGame.background} 2px solid;\n  border-radius: 5%;\n  background: ${(props) =>\n    props.guessed ? theme.memoryGame.background : theme.memoryGame.notFlipped};\n`;\n\nconst Img = styled.img`\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  background-size: cover;\n  border-radius: 5%;\n`;\n\ntype Props = {\n  name: string;\n  image: string;\n  index: number;\n  isFlippedNow: boolean;\n  isGuessed: boolean;\n  onClick: () => void;\n};\n\nconst Piece = (props: Props) => {\n  return (\n    <ButtonPiece\n      guessed={props.isGuessed}\n      flipped={props.isFlippedNow}\n      onClick={props.onClick}\n      image={props.image}\n    >\n      {(props.isFlippedNow && <Img src={props.image} />) ||\n        (!props.isGuessed && \"Turbellaria\")}\n    </ButtonPiece>\n  );\n};\n\nexport default Piece;\n","import { Component, useEffect, useRef, useState } from \"react\";\nimport { randomSort } from \"./arrayUtils\";\nimport { theme } from \"../../theme\";\nimport Piece from \"./Piece\";\nimport styled from \"styled-components\";\n\nconst DivWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  height: 0vh;\n`;\n\nconst PWinMessage = styled.p`\n  text-align: center;\n  width: 100vw;\n  height: 0vh;\n  font: 5em/0 ${theme.memoryGame.fontPrimary};\n  color: ${theme.memoryGame.textColor};\n`;\n\ntype Props = {\n  className?: string;\n};\n\ntype Card = {\n  name: string;\n  image: string;\n  flippedNow: boolean;\n};\n\nconst flipTime = 500;\n\nconst cards: Card[] = [\n  {\n    name: \"a\",\n    image: \"./imgs/worm1.jpg\",\n    flippedNow: false,\n  },\n  {\n    name: \"b\",\n    image: \"./imgs/worm2.jpg\",\n    flippedNow: false,\n  },\n  {\n    name: \"c\",\n    image: \"./imgs/worm3.jpg\",\n    flippedNow: false,\n  },\n  {\n    name: \"d\",\n    image: \"./imgs/worm4.jpg\",\n    flippedNow: false,\n  },\n  {\n    name: \"e\",\n    image: \"./imgs/worm5.jpg\",\n    flippedNow: false,\n  },\n  {\n    name: \"f\",\n    image: \"./imgs/worm6.jpg\",\n    flippedNow: false,\n  },\n  {\n    name: \"g\",\n    image: \"./imgs/worm7.jpg\",\n    flippedNow: false,\n  },\n  {\n    name: \"h\",\n    image: \"./imgs/worm8.jpg\",\n    flippedNow: false,\n  },\n];\n\nconst MemoryGame = (props: Props) => {\n  const [numberOfTries, setNumberOfTries] = useState(0);\n\n  const [flipTimeout, setFlipTimeout] =\n    useState<ReturnType<typeof setTimeout>>();\n\n  const [matrix, setMatrix] = useState<Card[]>(\n    randomSort([...cards, ...cards])\n  );\n\n  const [guessedArr, setGuessedArr] = useState<Card[]>([]);\n\n  const [flippedNowArr, setflippedNowArr] = useState<Card[]>([]);\n\n  const closeAllCards = () => {\n    setMatrix((p) => p.map((piece) => ({ ...piece, flippedNow: false })));\n  };\n\n  useEffect(() => {\n    const flipped = matrix.filter((piece) => piece.flippedNow);\n    if (flipped.length === 2) {\n      setFlipTimeout(\n        setTimeout(() => {\n          checkMatch();\n        }, flipTime)\n      );\n    }\n  }, [matrix]);\n\n  const checkMatch = () => {\n    const flipped = matrix.filter((piece) => piece.flippedNow);\n\n    if (flipped[0].name === flipped[1].name) {\n      setGuessedArr((p) => [...p, ...flipped]);\n      closeAllCards();\n      setflippedNowArr([]);\n    } else {\n      setTimeout(() => closeAllCards(), flipTime);\n    }\n    setNumberOfTries((p) => p + 1);\n  };\n\n  const checkWin = () => {\n    return guessedArr.length === matrix.length;\n  };\n\n  const flip = (index: number) => {\n    const flipped = matrix.filter((piece) => piece.flippedNow);\n    if (guessedArr.length !== matrix.length) {\n      if (flipped.length === 1) {\n        setflippedNowArr((p) => [...p, matrix[index]]);\n        setMatrix((p) =>\n          p.map((piece, i) => ({\n            ...piece,\n            flippedNow: i === index ? true : piece.flippedNow,\n          }))\n        );\n      } else {\n        setflippedNowArr([matrix[index]]);\n        setMatrix((p) =>\n          p.map((piece, i) => ({ ...piece, flippedNow: i === index }))\n        );\n      }\n    }\n  };\n\n  const checkGuessed = (index: number) => {\n    const card = matrix[index];\n    return guessedArr.some((piece) => card.name === piece.name);\n  };\n\n  return (\n    <DivWrapper>\n      {checkWin() && (\n        <PWinMessage>You won in {numberOfTries} tries!</PWinMessage>\n      )}\n      {matrix.map((e, index) => {\n        return (\n          <Piece\n            key={e.name + index}\n            index={index}\n            name={e.name}\n            image={e.image}\n            isFlippedNow={matrix[index].flippedNow}\n            isGuessed={checkGuessed(index)}\n            onClick={() => {\n              checkGuessed(index) ? \"\" : flip(index);\n            }}\n          ></Piece>\n        );\n      })}\n    </DivWrapper>\n  );\n};\n\nexport default MemoryGame;\n","export const randomSort = <Type>(array: Type[]) => {\n  return array.sort(() => 0.5 - Math.random());\n};\n","import { BoardValues, maxDynamicSize, winningLine } from \"./tictactoe\";\n\n/**\n * Checks for 5 matching box values in a row\n *  If entered playing board size bigger than maxDynamicSize - check for winningLine number of consecutive identical values\n *  Else the number of consecutive identical values is the same as size\n * @param boardMatrix filled with values\n * @param size of one dimension of the boardMatrix - defined by user\n * @returns winning player (\"X\" | \"O\") or null if draw\n */\nexport const checkRows = (\n  boardMatrix: BoardValues[][],\n  size: number\n): BoardValues => {\n  let winningLength = size > maxDynamicSize ? winningLine : size;\n  let count = 1;\n  for (let i = 0; i < boardMatrix.length; i++) {\n    for (let j = 0; j < boardMatrix[i].length - 1; j++) {\n      if (\n        boardMatrix[i][j] !== null &&\n        boardMatrix[i][j] === boardMatrix[i][j + 1]\n      ) {\n        count++;\n        if (winningLength === count) {\n          return boardMatrix[i][j];\n        }\n      } else {\n        count = 1;\n      }\n    }\n    count = 1;\n  }\n  return null;\n};\n\n/**\n * To check for consecutive identical values in positive and negative diagonals\n * Transforms original matrix so that it can be checked by checkRows function\n * @param arr == boardMatrix filled with values\n * @returns new matrix containing positive and negative slopes of the original matrix in rows (so that the new matrix can be checked by checkRows)\n */\nexport const checkDiagonals = <Type>(arr: Type[][]) => {\n  let positiveSlope: Type[] = [];\n  let negativeSlope: Type[] = [];\n  let finalArr: Type[][] = [];\n  for (var i = 0; i < arr.length * 2; i++) {\n    for (var j = 0; j <= i; j++) {\n      var k = i - j;\n      if (k < arr.length && j < arr.length) {\n        positiveSlope.push(arr[k][j]);\n      }\n      var h = arr.length - j - 1;\n      if (k < arr.length && h < arr.length && h >= 0) {\n        negativeSlope.push(arr[k][h]);\n      }\n    }\n    finalArr.push(positiveSlope);\n    finalArr.push(negativeSlope);\n    positiveSlope = [];\n    negativeSlope = [];\n  }\n  return finalArr;\n};\n\n/**\n * To check for consecutive identical values in columns\n * Transforms original matrix so it can be checked by checkRows function\n * @param m boardMatrix filled with values\n * @returns transformed matrix\n * inspiration: https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\n */\nexport const transpose = <Type>(m: Type[][]) =>\n  m[0].map((_, i) => m.map((x) => x[i]));\n","import { ChangeEvent, Component } from \"react\";\nimport { checkDiagonals, checkRows, transpose } from \"./gameLogic\";\nimport { theme } from \"../../theme\";\nimport styled from \"styled-components\";\n\nexport const Table = styled.table`\n  height: 100%;\n  width: 50%;\n`;\n\nexport const DivInput = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 5vw;\n  height: 20vh;\n`;\nexport const DivWrapSettings = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 30vw;\n`;\nexport const DivResult = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 20vw;\n  height: 20vh;\n  font: 5em/0 ${theme.tictactoe.fontPrimary};\n  color: ${theme.tictactoe.textColor};\n  background: ${theme.tictactoe.background};\n`;\n\nexport const DivTurn = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 20vw;\n  height: 20vh;\n  font: 5em/0 ${theme.tictactoe.fontPrimary};\n  color: ${theme.tictactoe.textColor};\n  background: ${theme.tictactoe.background};\n`;\n\nexport const DivWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 85.3vh;\n  width: 99.6vw;\n`;\n\nexport const InputBoardSize = styled.input`\n  height: 5vh;\n  width: 20vw;\n  background-color: ${theme.tictactoe.secondary};\n  color: ${theme.tictactoe.primary};\n  font: 5vh/0 ${theme.tictactoe.fontSecondary};\n  border: none;\n`;\n\nexport const Box = styled.button`\n  padding: 0;\n  margin: 0;\n  min-height: 100%;\n  min-width: 100%;\n  background-color: ${theme.tictactoe.box};\n  color: ${theme.tictactoe.secondary};\n  font: 100%/0 ${theme.tictactoe.fontPrimary};\n`;\n\nexport const PLAYER_X = \"X\" as const;\nexport const PLAYER_O = \"O\" as const;\nexport type BoardValues = typeof PLAYER_X | typeof PLAYER_O | null;\nexport const maxDynamicSize = 5;\nexport const winningLine = 5;\n\ntype State = {\n  size: number;\n  boardMatrix: BoardValues[][];\n  xTurn: boolean;\n  winner: BoardValues;\n  gameOver: boolean;\n  clickedXtimes: number;\n};\n\ntype Props = {\n  className?: string;\n};\n\nconst initializeBoardMatrix = (size: number) => {\n  return Array.from({ length: size }, () =>\n    Array.from({ length: size }, () => null)\n  );\n};\n\nexport default class Tictactoe extends Component<Props, State> {\n  state = {\n    size: 0,\n    boardMatrix: [],\n    xTurn: true,\n    winner: null,\n    gameOver: false,\n    clickedXtimes: 0,\n  } as State;\n\n  setSize = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      xTurn: true,\n      winner: null,\n      gameOver: false,\n      clickedXtimes: 0,\n      size: Number(e.target.value),\n      boardMatrix: initializeBoardMatrix(Number(e.target.value)),\n    });\n  };\n\n  move = (rowIndex: number, columnIndex: number) => {\n    if (\n      this.state.boardMatrix[rowIndex][columnIndex] === null &&\n      this.state.gameOver === false\n    ) {\n      this.setState(\n        (prevState) => {\n          return {\n            boardMatrix: prevState.boardMatrix.map((row, i) =>\n              row.map((cell, j) =>\n                i === rowIndex && j === columnIndex\n                  ? prevState.xTurn\n                    ? PLAYER_X\n                    : PLAYER_O\n                  : cell\n              )\n            ),\n            xTurn: !prevState.xTurn,\n          };\n        },\n        () => {\n          const whoWon = this.checkWin();\n          if (whoWon) {\n            this.setState({\n              gameOver: true,\n              winner: whoWon,\n            });\n          }\n        }\n      );\n      this.clickCounter();\n    }\n  };\n\n  checkDraw = () => {\n    if (this.state.clickedXtimes === this.state.size * this.state.size) {\n      this.setState({ gameOver: true });\n    }\n  };\n\n  checkWin = () => {\n    this.checkDraw();\n    return (\n      checkRows(this.state.boardMatrix, this.state.size) ||\n      checkRows(transpose(this.state.boardMatrix), this.state.size) ||\n      checkRows(checkDiagonals(this.state.boardMatrix), this.state.size)\n    );\n  };\n\n  clickCounter = () =>\n    this.setState((prevState) => ({\n      clickedXtimes: prevState.clickedXtimes + 1,\n    }));\n\n  avoidLeadingZero = () => Number(this.state.size).toString();\n\n  render() {\n    return (\n      <DivWrapper>\n        <DivWrapSettings>\n          {!this.state.gameOver && (\n            <DivTurn>Turn: {this.state.xTurn ? PLAYER_X : PLAYER_O}</DivTurn>\n          )}\n          {this.state.gameOver && (\n            <DivResult>\n              {this.state.winner ? `${this.state.winner} wins` : \"Draw\"}\n            </DivResult>\n          )}\n          <DivInput>\n            <InputBoardSize\n              type=\"number\"\n              onChange={this.setSize}\n              value={this.avoidLeadingZero()}\n              min=\"2\"\n              max=\"50\"\n            />\n          </DivInput>\n        </DivWrapSettings>\n        <Table>\n          <tbody>\n            {this.state.boardMatrix.map((boardRow, rowIndex) => {\n              return (\n                <tr key={rowIndex}>\n                  {boardRow.map((cell, columnIndex) => (\n                    <td\n                      key={columnIndex}\n                      onClick={() => this.move(rowIndex, columnIndex)}\n                    >\n                      <Box>{cell}</Box>\n                    </td>\n                  ))}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </DivWrapper>\n    );\n  }\n}\n","import { theme } from \"../../theme\";\nimport React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst DivContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: ${theme.todo.base};\n\n  * {\n    padding: 0;\n    margin: 0;\n  }\n`;\n\nconst H1 = styled.h1`\n  font: 7rem ${theme.todo.h1Font};\n  color: ${theme.todo.accent};\n`;\n\nconst DivBlock = styled.div`\n  width: 50%;\n  padding: 1rem;\n  background-color: ${theme.todo.pale};\n  border: 2px solid ${theme.todo.faded};\n`;\n\nconst ButtonCheckAll = styled.button`\n  font-size: xx-large;\n  height: 0.5em;\n  width: 5rem;\n  transform: rotate(90deg);\n  border: 0;\n  background-color: ${theme.todo.pale};\n  color: ${theme.todo.faded};\n  cursor: pointer;\n`;\n\nconst InputTask = styled.input`\n  width: 80%;\n  height: 100%;\n  border: 0;\n  background-color: ${theme.todo.pale};\n\n  ::placeholder {\n    color: ${theme.todo.faded};\n    font-size: x-large;\n    font-style: italic;\n  }\n`;\n\nconst Input = styled.input`\n  width: 2em;\n  height: 2em;\n  background-color: ${theme.todo.white};\n  border-radius: 50%;\n  margin: 0.5em;\n  vertical-align: middle;\n  border: 1px solid ${theme.todo.faded};\n  -webkit-appearance: none;\n  outline: none;\n  cursor: pointer;\n\n  :checked {\n    background-color: ${theme.todo.accent};\n  }\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: row;\n  justify-content: stretch;\n  align-items: center;\n  height: 5rem;\n  width: 100%;\n  background-color: ${theme.todo.pale};\n`;\n\nconst DivFilter = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 50vw;\n`;\n\nconst UlFiltered = styled.ul`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst LiFiltered = styled.li`\n  list-style-type: none;\n  color: ${theme.todo.primary};\n  width: 100%;\n  margin: 0.5rem;\n  padding: 0.5rem;\n  list-style-type: none;\n  color: ${theme.todo.primary};\n  width: 100%;\n`;\nconst ButtonFiltered = styled.button<{ selected: string }>`\n  border: 0;\n  margin: 0.5rem;\n  padding: 0.5rem;\n  background-color: ${theme.todo.base};\n  color: ${theme.todo.primary};\n  border-radius: 10%;\n\n  border: ${(props) =>\n    props.selected ? `${theme.todo.faded}` + \" 2px solid\" : \"white\"}; // :D\n\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst DivTask = styled.div<{ strikethrough: string }>`\n  text-decoration: ${(props) =>\n    props.strikethrough ? \"line-through\" : \"none\"};\n`;\n\nconst DivNumOfTasks = styled.div`\n  padding-top: 1em;\n  padding-left: 0.5em;\n`;\n\nconst TaskLi = styled.li`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 5vh;\n  border: 0.5px solid ${theme.todo.faded};\n  background-color: ${theme.todo.pale};\n  list-style-type: none;\n  color: ${theme.todo.primary};\n  width: 100%;\n  list-style-type: none;\n`;\n\nconst ButtonDestroy = styled.button`\n  width: 1em;\n  height: 1em;\n  border: 0;\n  color: ${theme.todo.pale};\n  background-color: ${theme.todo.pale};\n  vertical-align: middle;\n  outline: none;\n  cursor: pointer;\n  font-size: x-large;\n  text-decoration: none !important;\n\n  :hover {\n    color: ${theme.todo.primary};\n    text-decoration: none !important;\n  }\n`;\n\ntype State = {\n  tasks: Task[];\n  value: string;\n  idInc: number;\n  isActive: boolean;\n  isCompleted: boolean;\n};\n\ntype Props = {};\n\ntype Task = {\n  status: boolean;\n  name: string;\n  id: number;\n};\n\nexport default class Todo extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      value: \"\",\n      idInc: 0,\n      isActive: false,\n      isCompleted: false,\n    };\n    this.addToArr = this.addToArr.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.isChecked = this.isChecked.bind(this);\n    this.deleteFnc = this.deleteFnc.bind(this);\n    this.checkAll = this.checkAll.bind(this);\n    this.showActive = this.showActive.bind(this);\n    this.showInactive = this.showInactive.bind(this);\n    this.showAll = this.showAll.bind(this);\n  }\n\n  addToArr(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    this.setState((prevState) => {\n      const newTask = {\n        status: false,\n        name: prevState.value,\n        id: prevState.idInc,\n      };\n      return {\n        tasks: [...prevState.tasks, newTask],\n        value: \"\",\n        idInc: prevState.idInc + 1,\n      };\n    });\n  }\n\n  addTask(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  isChecked(i: number) {\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.map((task) =>\n        task.id === i ? { ...task, status: !task.status } : task\n      ),\n    }));\n  }\n\n  deleteFnc(i: number) {\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.filter((item) => item.id !== i),\n    }));\n  }\n\n  checkAll() {\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.map((task) =>\n        prevState.tasks.every((each) => each.status === true)\n          ? { ...task, status: false }\n          : { ...task, status: true }\n      ),\n    }));\n  }\n\n  showActive() {\n    this.setState({\n      isActive: true,\n      isCompleted: false,\n    });\n  }\n\n  showInactive() {\n    this.setState({\n      isCompleted: true,\n      isActive: false,\n    });\n  }\n\n  showAll() {\n    this.setState({\n      isCompleted: false,\n      isActive: false,\n    });\n  }\n\n  render() {\n    let filteredArr: Task[];\n\n    if (this.state.isActive) {\n      filteredArr = this.state.tasks.filter((item) => !item.status);\n    } else if (this.state.isCompleted) {\n      filteredArr = this.state.tasks.filter((item) => item.status);\n    } else {\n      filteredArr = this.state.tasks;\n    }\n\n    return (\n      <DivContainer id=\"container\" className=\"todo\">\n        <H1>todos</H1>\n        <DivBlock id=\"block\">\n          <Form onSubmit={(e) => this.addToArr(e)}>\n            <ButtonCheckAll\n              id=\"checkAllBtn\"\n              type=\"button\"\n              onClick={this.checkAll}\n            >\n              ❯\n            </ButtonCheckAll>\n            <InputTask\n              type=\"text\"\n              onChange={this.addTask}\n              value={this.state.value}\n              required={true}\n              placeholder=\"What needs to be done?\"\n              id=\"input\"\n            />\n          </Form>\n          <ul>\n            {filteredArr.map((task, index) => {\n              return (\n                <TaskLi className={\"task\"} key={task.name + index}>\n                  <Input\n                    className=\"round-checkbox\"\n                    type=\"checkbox\"\n                    onChange={() => this.isChecked(task.id)}\n                    checked={task.status}\n                  ></Input>\n                  <DivTask strikethrough={task.status ? \"true\" : \"\"}>\n                    {task.name}\n                  </DivTask>\n                  <ButtonDestroy\n                    className=\"destroy\"\n                    onClick={() => this.deleteFnc(task.id)}\n                  >\n                    x\n                  </ButtonDestroy>\n                </TaskLi> //default - All\n              );\n            })}\n          </ul>\n          <DivNumOfTasks id=\"numOfTasks\">\n            {this.state.tasks.filter((elem) => {\n              return !elem.status;\n            }).length + \" items left\"}\n          </DivNumOfTasks>\n        </DivBlock>\n        <DivFilter id=\"filter\">\n          <UlFiltered>\n            <LiFiltered>\n              <ButtonFiltered\n                selected={\n                  !this.state.isActive && !this.state.isCompleted ? \"true\" : \"\"\n                }\n                onClick={this.showAll}\n              >\n                All\n              </ButtonFiltered>\n            </LiFiltered>\n            <LiFiltered>\n              <ButtonFiltered\n                selected={this.state.isActive ? \"true\" : \"\"}\n                onClick={this.showActive}\n              >\n                Active\n              </ButtonFiltered>\n            </LiFiltered>\n            <LiFiltered>\n              <ButtonFiltered\n                selected={this.state.isCompleted ? \"true\" : \"\"}\n                onClick={this.showInactive}\n              >\n                Completed\n              </ButtonFiltered>\n            </LiFiltered>\n          </UlFiltered>\n        </DivFilter>\n      </DivContainer>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport {\n  Link,\n  Route,\n  RouteComponentProps,\n  BrowserRouter as Router,\n  Switch,\n} from \"react-router-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { theme } from \"./theme\";\nimport { withRouter } from \"react-router\";\nimport Counter from \"./components/counter/Counter\";\nimport Hackertyper from \"./components/hackertyper/Hackertyper\";\nimport MemoryGame from \"./components/memoryGame/MemoryGame\";\nimport TicTacToe from \"./components/tictactoe/tictactoe\";\nimport Todo from \"./components/todo/Todo\";\nimport styled from \"styled-components\";\n\nconst UlNav = styled.ul`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  list-style-type: none;\n  font: bold 1.8em/150% ${theme.hackertyper.font};\n`;\n\nconst GlobalStyle = createGlobalStyle<{ bgcolor: string }>`\n  body {\n    background-color: ${(props) =>\n      props.bgcolor === \"/counter\"\n        ? theme.counter.background\n        : props.bgcolor === \"/hackertyper\"\n        ? theme.hackertyper.background\n        : props.bgcolor === \"/todo\"\n        ? theme.todo.background\n        : props.bgcolor === \"/tictactoe\"\n        ? theme.tictactoe.background\n        : props.bgcolor === \"/memoryGame\"\n        ? theme.memoryGame.background\n        : \"\"};\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n    height: 100vh;\n    width: 97vw;\n  }`;\n\nclass App extends Component<RouteComponentProps<{ location: any }>> {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <GlobalStyle bgcolor={this.props.location.pathname} />\n        <div id=\"divRender\">\n          <nav>\n            <UlNav>\n              <li>\n                <Link to=\"/counter\" style={{ textDecoration: \"none\" }}>\n                  Counter\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/hackertyper\" style={{ textDecoration: \"none\" }}>\n                  Hacker Typer\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/todo\" style={{ textDecoration: \"none\" }}>\n                  To Do List\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/tictactoe\" style={{ textDecoration: \"none\" }}>\n                  Tic Tac Toe\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/memoryGame\" style={{ textDecoration: \"none\" }}>\n                  Memory Game\n                </Link>\n              </li>\n            </UlNav>\n          </nav>\n\n          <Switch>\n            <Route path=\"/counter\">\n              <Counter></Counter>\n            </Route>\n            <Route path=\"/hackertyper\">\n              <Hackertyper></Hackertyper>\n            </Route>\n            <Route path=\"/todo\">\n              <Todo></Todo>\n            </Route>\n            <Route path=\"/tictactoe\">\n              <TicTacToe></TicTacToe>\n            </Route>\n            <Route path=\"/memoryGame\">\n              <MemoryGame></MemoryGame>\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}